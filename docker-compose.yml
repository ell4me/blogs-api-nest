version: '3.7'

volumes:
  esdata:
  prometheus_data: { }
  grafana_data: { }

# !!!!! Когда вы не указываете сеть, Compose создает сеть ПО УМОЛЧАНИЮ и подключает все сервисы к ней. !!!!!!
# Создавая отдельную сеть (например, monitoring), ты ограничиваешь видимость только нужным сервисам.
# Подключив сервисы к сети monitoring, ты разрешаешь им использовать Docker DNS и видеть остальных, кто подключен к этой сети.
# ПОДКЛЮЧИЛ ПРОСТО ДЛЯ ПРИМЕРА, НА САМОМ ДЕЛЕ ОНА ТУТ НЕ НУЖНА И ТАК ВСЕ БУДЕТ РАБОТАТЬ, ТАК КАК СОЗДАСТСЯ СЕТЬ ПО УМОЛЧАНИЮ
networks:
  monitoring:
    driver: bridge

services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    networks:
      - monitoring
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    # web.enable-lifecycle позволяет делать hot-reload конфига через API (опционально)

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    networks:
      - monitoring
    ports:
      - "9100:9100"
    # Примонтируем системные файлы, чтобы Node Exporter мог читать метрики хоста
    # В Linux Docker нужно права --privileged или конкретные mounts:
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      # опционально: выключим некоторые метрики, которые могут не работать в контейнере
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    networks:
      - monitoring
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin  # пароль для admin (поменяйте в продакшене!)
    volumes:
      - grafana_data:/var/lib/grafana

  elasticsearch:
    image: elasticsearch:8.18.1
    container_name: elasticsearch
    networks:
      - monitoring
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ports:
      - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data

  kibana:
    image: kibana:8.18.1
    container_name: kibana
    networks:
      - monitoring
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  logstash:
    image: logstash:8.18.1
    container_name: logstash
    networks:
      - monitoring
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch

  filebeat:
    image: elastic/filebeat:8.18.1
    container_name: filebeat
    networks:
      - monitoring
    user: root
    volumes:
      - ./filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs:/app/logs:ro
    depends_on:
      - elasticsearch

  # НЕ БУДЕТ РАБОТАТЬ ТАК ЧТЕНИЕ ЛОГОВ НЕ ВОЗМОЖНО ЛОКАЛЬНО, ИЗ-ЗА ИЗОЛИРОВАННОСТИ КОНТЕЙНЕРОВ, ЛОГОВ И ТД
  # Соответственно не сможем достучаться до файлов с логами
  # ПОЭТОМУ БУДЕТ ЧИТАТЬ ЛОГИ С ФАЙЛА В КОТОРЫЙ САМИ ЖЕ И БУДЕМ ПИСАТЬ
  #  filebeat-logstash:
  #    image: elastic/filebeat:8.18.1
  #    container_name: filebeat-logstash
  #    user: root
  #    volumes:
  #      - ./filebeat-logstash.yml:/usr/share/filebeat/filebeat.yml:ro
  #      - /var/lib/docker/containers:/var/lib/docker/containers:ro
  #      - /var/run/docker.sock:/var/run/docker.sock
  #    depends_on:
  #      - logstash
  #
  #  filebeat-elastic:
  #    image: elastic/filebeat:8.18.1
  #    container_name: filebeat-elastic
  #    user: root
  #    volumes:
  #      - ./filebeat-elastic.yml:/usr/share/filebeat/filebeat.yml:ro
  #      - /var/lib/docker/containers:/var/lib/docker/containers:ro
  #      - /var/run/docker.sock:/var/run/docker.sock
  #    depends_on:
  #      - elasticsearch

  # нельзя добавлять два output, поэтому 2 разных конфига filebeat один напрямую пишет в elastic, другой в logstash(просто для примера, что можно так и так)

  metricbeat:
    image: elastic/metricbeat:8.18.1
    container_name: metricbeat
    networks:
      - monitoring
    user: root
    volumes:
      - ./metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro # ro - read-only
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /proc:/hostfs/proc:ro
      - /:/hostfs:ro
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - elasticsearch

  pg:
    image: postgres
    container_name: pg
    networks:
      - monitoring
    environment:
      - POSTGRES_DB=${PG_DB:-blog_db}
      - POSTGRES_USER=${PG_USER:-postgres}
      - POSTGRES_PASSWORD=${PG_PASSWORD:-admin}
    restart: always
    ports:
      - '5432:5432'

  pgAdmin:
    image: dpage/pgadmin4
    container_name: pgAdmin
    networks:
      - monitoring
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=test@gmail.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    restart: unless-stopped
    depends_on:
      - pg

  mongodb:
    container_name: mongodb
    networks:
      - monitoring
    image: mongo:6.0.2
    restart: always
    ports:
      - '27017:27017'
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${DB_USER:-root}
      - MONGO_INITDB_ROOT_PASSWORD=${DB_PASS:-password}
      - MONGO_INITDB_DATABASE=${DB_NAME:-blog_db}

  blog:
    container_name: blogs-api-nest
    networks:
      - monitoring
    volumes:
      - '.:/app'
      - '/app/node_modules'
      - './logs:/app/logs'
    build: .
    restart: always
    ports:
      - '4000:4000'
    environment:
      - PORT=4000
      - DB_USER=root
      - DB_PASS=password
      - DB_NAME=blog_db
      - DB_HOST=mongodb://mongodb:27017
      - INCLUDE_TESTING_MODULE=true
      - JWT_SECRET=cat
      - LOGIN=admin
      - PASSWORD=qwerty
      - JWT_REFRESH_SECRET=dog
      - TTL_RATE_LIMIT=10
      - NUMBER_RATE_LIMIT=5
      - PG_DB=blog_db
      - PG_USER=postgres
      - PG_PASSWORD=admin
      - PG_PORT=5432
      - PG_HOST=pg
      - NODE_ENV=development
    depends_on:
      - mongodb
      - pg